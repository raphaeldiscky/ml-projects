# -*- coding: utf-8 -*-
"""LSTMvsGRU_IBM_stock_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YUS96c3eFOf_9TUamQBVwMyH4Fnm70Fh

## IBM Stock Prediction - LSTM vs GRU

Saham merupakan salah satu pilihan investasi yang menarik karena dapat diperoleh untung yang besar dibandingkan dengan usaha lainnya. Untuk meminimalkan resiko kerugian, diperlukan perhatian yang jeli terhadap pergerakan saham dan perkembangan pasar modal merupakan salah satu indikator yang perlu dipantau. Dengan teknologi pemrosesan prediksi dan pembelajaran mesin saat ini, identifikasi prediksi harga saham dapat dilakukan secara otomatis. Deep Learning merupakan salah satu bagian dari pembelajaran mesin, dan memiliki akurasi pengenalan yang tinggi dengan data yang sangat banyak. Proyek ini menggunakan history harga saham dari IBM dan membandingkan metode RNN antara LSTM dan GRU untuk melakukan prediksi terhadap nilai saham dari IBM. 

Data yang digunakan untuk proyek ini diambil dari Yahoo Finance: [IBM - Stock Price ](https://finance.yahoo.com/quote/IBM/history?period1=1370390400&period2=1636070400&interval=1d&filter=history&frequency=1d&includeAdjustedClose=true). 

Pada dataset tersebut berisi sejarah harga stock pada perusahaan IBM dengan jumlah data sebanyak 10440 dengan 7 kolom yaitu Date, Open, High, Low, Close, Adj Close, dan Volume. Tetapi pada proyek ini kita akan hanya menggunakan kolom Date dan harga saham IBM pada waktu Close atau harga penutupan pada tanggal tertentu untuk membuat prediksi harga saham perusahaan IBM.
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from keras.models import Sequential
from keras.layers import Dense, Dropout, LSTM, GRU
from sklearn.metrics import mean_squared_error, mean_absolute_error
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from keras.callbacks import EarlyStopping
from tensorflow.keras.optimizers import Adam, SGD

"""**Import file IMB.csv**"""

from google.colab import files
  
uploaded = files.upload()

"""**Membaca file IMB.csv**"""

df = pd.read_csv('IBM.csv')
df.head(-5)

df.info()

df.describe()

"""**Memvisualisasikan Dataset Berdasarkan Harga Close**"""

df['Close'] = df['Close'].astype(float)

plt.figure(figsize=(20,7))
plt.plot(df['Date'].values, df['Close'].values, label = 'IBM Stock Price')
plt.xticks(np.arange(100,df.shape[0],200))
plt.xlabel('Date')
plt.ylabel('Price ($)')
plt.legend()
plt.show()

"""## Data Preparation
Teknik data preparation yang dilakukan adalah membagi dataset menjadi data latih (train) dan data  uji (test).
"""

num_shape = 10000

train = df.iloc[:num_shape, 1:2].values
test = df.iloc[num_shape:, 1:2].values

"""Selanjutnya melakukan scaling untuk fitur-fitur menggunakan normalisai dengan menggunakan fungsi MinMaxScaler."""

sc = MinMaxScaler(feature_range = (0, 1))
train_scaled = sc.fit_transform(train)

"""Sekarang kita ambil satu baris dan potong dengan window sebanyak 60 elemen"""

X_train = []

y_train = []

window = 60

for i in range(window, num_shape):
    X_train_ = np.reshape(train_scaled[i-window:i, 0], (window, 1))
    X_train.append(X_train_)
    y_train.append(train_scaled[i, 0])
X_train = np.stack(X_train)
y_train = np.stack(y_train)

"""# **Menggunakan model LSTM**

**Membuat model Sequential LSTM**
"""

model = Sequential()

model.add(LSTM(units = 50, return_sequences = True, input_shape = (X_train.shape[1], 1)))
model.add(Dropout(0.2))

model.add(LSTM(units = 50, return_sequences = True))
model.add(Dropout(0.2))

model.add(LSTM(units = 50, return_sequences = True))
model.add(Dropout(0.2))

model.add(LSTM(units = 50))
model.add(Dropout(0.2))

model.add(Dense(units = 1))
model.summary()

"""Model LSTM dilatih dengan menggunakan optimizer adam dan loss yang digunakan adalah MSE, epoch sebanyak 20 dan batch size 32."""

model.compile(optimizer = 'adam', loss = 'mean_squared_error')
history = model.fit(X_train, y_train, epochs = 20, batch_size = 32);

plt.plot(history.history['loss'])
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.show()

"""**Melakukan Prediksi**"""

df_volume = np.vstack((train, test))

inputs = df_volume[df_volume.shape[0] - test.shape[0] - window:]
inputs = inputs.reshape(-1,1)
inputs = sc.transform(inputs)

num_2 = df_volume.shape[0] - num_shape + window

X_test = []

for i in range(window, num_2):
    X_test_ = np.reshape(inputs[i-window:i, 0], (window, 1))
    X_test.append(X_test_)
    
X_test = np.stack(X_test)

predict = model.predict(X_test)
predict = sc.inverse_transform(predict)

"""**Hasil MSE dari perbedaan antara prediksi dengan test**"""

diff = predict - test

print("MSE:", np.mean(diff**2))

"""**Memvisualisasikan hasil prediksi harga saham IBM dengan harga saham aslinya dengan metode LSTM**"""

plt.figure(figsize=(20,7))
plt.plot(df['Date'].values[1800:], df_volume[1800:], color = 'red', label = 'Real IBM Stock Price')
plt.plot(df['Date'][-predict.shape[0]:].values, predict, color = 'blue', label = 'Predicted IBM Stock Price')
plt.xticks(np.arange(100,df[1800:].shape[0],200))
plt.title('IBM Stock Price Prediction')
plt.xlabel('Date')
plt.ylabel('Price ($)')
plt.legend()
plt.show()

"""# **GRU**

**Membuat model Sequential GRU**
"""

modelGRU = Sequential()

modelGRU.add(GRU(units=50, return_sequences=True, input_shape=(X_train.shape[1],1)))
modelGRU.add(Dropout(0.2))

modelGRU.add(GRU(units=50, return_sequences=True, input_shape=(X_train.shape[1],1)))
modelGRU.add(Dropout(0.2))

modelGRU.add(GRU(units=50, return_sequences=True, input_shape=(X_train.shape[1],1)))
modelGRU.add(Dropout(0.2))

modelGRU.add(GRU(units=50))
modelGRU.add(Dropout(0.2))

modelGRU.add(Dense(units=1))
modelGRU.summary()

"""Model GRU dilatih dengan menggunakan optimizer sgd dan loss yang digunakan adalah MSE, epoch sebanyak 20 dan batch size 32."""

modelGRU.compile(optimizer='sgd', loss='mean_squared_error')
history = modelGRU.fit(X_train, y_train, epochs=20, batch_size=32)

plt.plot(history.history['loss'])
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.show()

predict = modelGRU.predict(X_test)
predict = sc.inverse_transform(predict)

"""**Hasil MSE dari perbedaan antara prediksi dengan test**"""

diff = predict - test

print("MSE:", np.mean(diff**2))

"""**Memvisualisasikan hasil prediksi harga saham IBM dengan harga saham aslinya dengan metode GRU**"""

plt.figure(figsize=(20,7))
plt.plot(df['Date'].values[1800:], df_volume[1800:], color = 'red', label = 'Real IBM Stock Price')
plt.plot(df['Date'][-predict.shape[0]:].values, predict, color = 'blue', label = 'Predicted IBM Stock Price')
plt.xticks(np.arange(100,df[1800:].shape[0],20))
plt.title('IBM Stock Price Prediction')
plt.xlabel('Date')
plt.ylabel('Price ($)')
plt.legend()
plt.show()